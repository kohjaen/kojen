# This was started from a basic workflow

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 2 # Try to save memory
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.7, 3.8, 3.9]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository (AND SUBMODULES) under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          submodules: recursive
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          # I choose to put my single dependency here.
          pip install cogapp
          pip install setuptools wheel # twine -> don't want to publish (yet)...want to install locally and generate C++ code to test.
          #if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Install Kojen locally from this repository
        run: |
          pip install -find-links=. kojen
          
      - name: Generate example code
        run: |
          cd example
          python generate.py
          cd ..
      #- name: Lint with flake8
      #  run: |
      #    # stop the build if there are Python syntax errors or undefined names
      #    flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #    flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics          

      - name: Create Build Environment
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: |
          rm ${{github.workspace}}/build
          cmake -E make_directory ${{github.workspace}}/build

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{github.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source 
        # and build directories, but this is only available with CMake 3.13 and higher.  
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        run: cmake ${{github.workspace}}/example/autogen/allplatforms -DCMAKE_BUILD_TYPE=$BUILD_TYPE

      - name: Build
        working-directory: ${{github.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE

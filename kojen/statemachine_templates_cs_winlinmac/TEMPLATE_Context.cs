/**
 * @file
 * @ingroup <<<GROUP>>>
 * @brief   <<<BRIEF>>>
 *
 *          This code is Autogenerated from '<<<PYIFGENNAME>>>' with the MIT License.
 *          As such, please only hand-code within 'USER' tags.
 *
 * @author  <<<AUTHOR>>>
 */
using System;
/// {{{USER_USING_DECLARATIONS}}}
/// {{{USER_USING_DECLARATIONS}}}

namespace <<<NAMESPACE>>>
{
    /// <summary>
    /// Parameterizable event structs for <<<STATEMACHINENAME>>>.
    /// </summary>
    <<<PER_EVENT_BEGIN>>>
    public struct <<<EVENTNAME>>>{
    <<<EVENTMEMBERSDECLARE>>>
    };
    <<<PER_EVENT_END>>>

    /// <summary>
    /// Context for <<<STATEMACHINENAME>>>.
    /// </summary>
    public class <<<STATEMACHINENAME>>>Context
    {
        <<<PER_GUARD_BEGIN>>>
        /// <summary>
        /// <<<GUARDNAME>>> guard.
        /// </summary>
        public virtual bool <<<GUARDNAME>>>()
        {
            /// {{{USER_<<<GUARDNAME>>>}}}
            /// {{{USER_<<<GUARDNAME>>>}}}
            Console.WriteLine("<<<STATEMACHINENAME>>>Context : Guard >> <<<GUARDNAME>>> : " + ((<<<guardName>>>) ? ("True") : ("False")));
            return <<<guardName>>>;
        }
        <<<PER_GUARD_END>>>
        <<<PER_ACTION_SIGNATURE_BEGIN>>>
        /// <summary>
        /// The <<<ACTIONNAME>>> and event parameters.
        /// </summary>
        public virtual void <<<ACTIONNAME>>>(ref <<<EVENTNAME>>> data)
        {
            /// {{{USER_<<<ACTIONNAME>>>On<<<EVENTNAME>>>}}}
            /// {{{USER_<<<ACTIONNAME>>>On<<<EVENTNAME>>>}}}
            //handle<<<ACTIONNAME>>>On<<<EVENTNAME>>>Entry.Set();
            Console.WriteLine("<<<STATEMACHINENAME>>>Context >> <<<ACTIONNAME>>> on event <<<EVENTNAME>>>...");
        }
        <<<PER_ACTION_SIGNATURE_END>>>

        /// @{ State Entry/Exit
        <<<PER_STATE_BEGIN>>>
        /// <summary>
        /// This function is called when <<<STATENAME>>> is entered.
        /// </summary>
        public virtual void On<<<STATENAME>>>Entry()
        {
            /// {{{USER_On<<<STATENAME>>>Entry}}}
            /// {{{USER_On<<<STATENAME>>>Entry}}}
            Console.WriteLine("<<<STATEMACHINENAME>>>Context >> on<<<STATENAME>>>Entry...");
        }
        /// <summary>
        /// This function is called when <<<STATENAME>>> is exited.
        /// </summary>
        public virtual void On<<<STATENAME>>>Exit()
        {
            /// {{{USER_On<<<STATENAME>>>Exit}}}
            /// {{{USER_On<<<STATENAME>>>Exit}}}
            Console.WriteLine("<<<STATEMACHINENAME>>>Context >> on<<<STATENAME>>>Exit...");
        }
        <<<PER_STATE_END>>>
        /// @}

        /// <summary>
        ///
        /// </summary>
        <<<PER_ACTION_SIGNATURE_BEGIN>>>
        //OsWrappers::Event handle<<<ACTIONNAME>>>On<<<EVENTNAME>>>Entry;
        <<<PER_ACTION_SIGNATURE_END>>>

        /// <summary>
        /// 
        /// </summary>
        <<<PER_ACTION_SIGNATURE_BEGIN>>>
        public void Check<<<ACTIONNAME>>>On<<<EVENTNAME>>>Entry()
        {
            //CHECK_TRUE(cSuccess == handle<<<ACTIONNAME>>>On<<<EVENTNAME>>>Entry.TimedWait(cEventTimeoutMs));
            //handle<<<ACTIONNAME>>>On<<<EVENTNAME>>>Entry.Reset();
        }
        <<<PER_ACTION_SIGNATURE_END>>>
        <<<PER_GUARD_BEGIN>>>
        public bool <<<guardName>>> = false;
        <<<PER_GUARD_END>>>

        /// {{{USER_MEMBERS}}}
        /// {{{USER_MEMBERS}}}
    };
} // namespace <<<NAMESPACE>>>

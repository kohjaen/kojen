from MsgHeader import *
'''
[[[cog
import cog
from <<<PYIFGENNAME>>> import *
from LanguagePython import *
interface = CreateInterface()
language  = LanguagePython()

for g in language.LicenseAgreement():
    cog.outl(g)

]]]

[[[end]]]
'''
'''
 * @file
 * @ingroup <<<GROUP>>>
 * @brief   <<<BRIEF>>>
 *
 *          This code is Autogenerated from '<<<PYIFGENNAME>>>.py' with the MIT License.
 *          As such, please only hand-code within 'USER' tags.
 *
 * @author  <<<AUTHOR>>>
 '''
def sizeof(type):
    if isinstance(type, basestring):
        return calcsize(FormatCharFromCPPType(type))
    return type.SizeOf()

'''[[[cog
is_impl = True
classname = ""
structs = interface.All()
for s in structs:
    result = language.InstantiatePtrToType(s.Name, "result")
    comment = ""
    accessor = "."
    if interface.IsProtocolStruct(s.Name) or interface.IsStruct(s.Name):
        comment = "Protocol definitions" if interface.IsProtocolStruct(s.Name) else "User definitions"

    hasArray = False
    if interface.IsMessageStruct(s.Name):
        hasArray = s.HasArray()
        comment = "Message " + s.Name + " "+language.MessageDescriptor(interface,s)+" definitions"

    cog.outl("\n# ********************************************************")
    cog.outl("# " + comment)
    cog.outl("# ********************************************************")

    factoryparams = language.GetFactoryCreateParams(s,interface)
    if not interface.IsProtocolStruct(s.Name): # this goes into a seperate file -> underlying framework need to know of this (but not every interface that uses it)
        structguts = language.DeclareStructMembers(s,interface, language.WhiteSpace(0))
        cog.outl("class %s:" % s.Name)
        for gut in structguts:
            cog.outl(gut)

        functionguts = language.DeclareDataFormatFunction(s,interface,language.WhiteSpace(0),'FormatCharFromCPPType')
        for gut in functionguts:
            cog.outl(gut)

        functionguts = language.DeclareDataSizeFunction(s,interface,language.WhiteSpace(0))
        for gut in functionguts:
            cog.outl(gut)

        cog.outl("\n")

    cog.outl("# Factory for " + s.Name)
    cog.outl(language.DeclareFunction(s.Name, classname, "Create_"+s.Name,is_impl,factoryparams))
    cog.outl(language.WhiteSpace(0)+result)
    guts = language.InstantiateStructMembers(s,interface,language.WhiteSpace(0),"result",accessor)
    for g in guts:
        cog.outl(g)
    cog.outl(language.WhiteSpace(0)+"return result")

    #cog.outl("# Serialize " + s.Name + " to separate bytestream")
    #cog.outl(language.DeclareFunction(language.ByteStreamTypePtr(), classname, "ToByteStream_"+s.Name,is_impl,[("const " + (s.Name if "."==accessor else language.PtrToTypeName(s.Name)) + "&","_to")]))
    #cog.outl("# Serialize " + s.Name + " into a bytestream")
    #cog.outl("# Stream is resized accordingly.")
    #cog.outl(language.DeclareFunction("void",classname,"IntoByteStream_"+s.Name,is_impl,[("const " + (s.Name if "."==accessor else language.PtrToTypeName(s.Name)) + "&","_to"),(language.ByteStreamTypePtr() + "&","byte_stream"), ("size_t&", "index")]))
    #cog.outl("# Serialize " + s.Name + " from a bytestream")
    #cog.outl(language.DeclareFunction((s.Name if "."==accessor else language.PtrToTypeName(s.Name)),classname, "FromByteStream_"+s.Name,is_impl,[("const " + language.ByteStreamTypePtr() + "&", "byte_stream"), ("size_t&", "index")]))
]]]'''

'''[[[end]]]'''

b = Create_sCustomStruct(3,2,1)
a = Create_sSomeReqRsp(b,6,4,[1.23,2.34,3.45,4.56])
print (a)
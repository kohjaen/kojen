/**
[[[cog
import cog
from <<<PYIFGENNAME>>> import *
from LanguageCPP import *
interface = CreateInterface()
language  = LanguageCPP()

for g in language.LicenseAgreement():
    cog.outl(g)

]]]

[[[end]]]
*/
/**
 * @file
 * @ingroup <<<GROUP>>>
 * @brief   <<<BRIEF>>>
 *
 *          This code is Autogenerated from '<<<PYIFGENNAME>>>.py' with the MIT License.
 *          As such, please only hand-code within 'USER' tags.
 *
 * @author  <<<AUTHOR>>>
 */
#include "<<<CLASSNAME>>>.h"
#include "<<<CLASSNAME>>>Simple_Tests.h"
#include <stdio.h>
#include <assert.h>
namespace <<<NAMESPACE>>>
{
    /**
    Testing "Packedness", "Payload Size" and "To/From Streams" for correct and efficient TX/RX, and generated payload sized, for stream reading/writing.
    */

    bool RunTests()
    {
        /**[[[cog
        cog.outl("")
        allstructs = interface.All()
        for s in allstructs:
            test = UnitTestWriter(interface,s,language,"ptr2"+s.Name)
            guts = test.WRITE_UNITTEST_PACKED_STRUCT_SIZE(language.WhiteSpace(0))
            for g in guts:
                cog.outl(g)

        messages = interface.Messages()
        for s in messages:
            test = UnitTestWriter(interface,s,language,"ptr2"+s.Name)
            guts = test.WRITE_UNITTEST_FACTORY_PAYLOAD_SIZE(language.WhiteSpace(0))
            for g in guts:
                cog.outl(g)

        for s in messages:
            test = UnitTestWriter(interface,s,language,"ptr2"+s.Name)
            cog.outl("#ifdef __arm__")

            guts = test.WRITE_UNITTEST_TOFROM_BYTESTREAM(language.WhiteSpace(0), True)
            for g in guts:
                cog.outl(g)

            cog.outl('#else')

            guts = test.WRITE_UNITTEST_TOFROM_BYTESTREAM(language.WhiteSpace(0))
            for g in guts:
                cog.outl(g)

            cog.outl("#endif //__arm__")

        ]]]*/

        //[[[end]]]
        return true;
    }
}

/**
 * @file
 * @ingroup GROUP_EXAMPLE
 * @brief   An example demonstrating code-generation abilities.
 *
 *          This code is Autogenerated from 'Transition Table' with the MIT License.
 *          As such, please only hand-code within 'USER' tags.
 *
 * @author  yourname@yourdomain.com
 */
#pragma once

#ifdef __arm__
#include <allplatforms/allocator.h>
#endif //__arm__
#include <memory>
/// {{{USER_HEADER}}}
/// {{{USER_HEADER}}}

// For printouts.
#define _OUT_CDPlayer_DISP_

/** Should you wish to run your state machine on the caller thread instead of using a threaded dispatcher,
    add '#undef THREADED' in the 'USER_FORWARD_DECLARATIONS' preservation tags.
*/
#define THREADED
/// {{{USER_FORWARD_DECL}}}
//#undef THREADED
/// {{{USER_FORWARD_DECL}}}

#define MOVE_ONLY(name)                     \
    name(const name& other) = delete;       \
    name& operator=(name& other) = delete;  \
    name(name&& other) = default;           \
    name& operator=(name&& other) = default;

namespace CDPlayerSM
{
    /// {{{USER_LOCALS}}}
    /// {{{USER_LOCALS}}}

    /// @{ Events
    struct Event
    {
    public:
        virtual ~Event(){}
        Event(){};
        MOVE_ONLY(Event)
    protected:
        friend class CCDPlayerStateMachineImpl;
        //virtual void Dispatch(void* sm) = 0; -> Fails on Linx (but not Mac/Win)
        virtual void Dispatch(void* sm) {};
    };
    typedef std::unique_ptr<Event> Event_ptr;

    struct EventOpen : public Event
    {
        EventOpen(){};
        MOVE_ONLY(EventOpen)
#ifdef __arm__
    DECLARE_ALLOCATOR
#endif //__arm__
    protected:
        virtual void Dispatch(void* sm) override;
    };
    typedef std::unique_ptr<EventOpen> EventOpen_ptr;
    struct EventPlay : public Event
    {
        EventPlay(){};
        MOVE_ONLY(EventPlay)
        uint16_t m_track_no;
#ifdef __arm__
    DECLARE_ALLOCATOR
#endif //__arm__
    protected:
        virtual void Dispatch(void* sm) override;
    };
    typedef std::unique_ptr<EventPlay> EventPlay_ptr;
    struct EventEndOfTrack : public Event
    {
        EventEndOfTrack(){};
        MOVE_ONLY(EventEndOfTrack)
#ifdef __arm__
    DECLARE_ALLOCATOR
#endif //__arm__
    protected:
        virtual void Dispatch(void* sm) override;
    };
    typedef std::unique_ptr<EventEndOfTrack> EventEndOfTrack_ptr;
    struct EventSkipNextTrack : public Event
    {
        EventSkipNextTrack(){};
        MOVE_ONLY(EventSkipNextTrack)
#ifdef __arm__
    DECLARE_ALLOCATOR
#endif //__arm__
    protected:
        virtual void Dispatch(void* sm) override;
    };
    typedef std::unique_ptr<EventSkipNextTrack> EventSkipNextTrack_ptr;
    struct EventSkipPreviousTrack : public Event
    {
        EventSkipPreviousTrack(){};
        MOVE_ONLY(EventSkipPreviousTrack)
#ifdef __arm__
    DECLARE_ALLOCATOR
#endif //__arm__
    protected:
        virtual void Dispatch(void* sm) override;
    };
    typedef std::unique_ptr<EventSkipPreviousTrack> EventSkipPreviousTrack_ptr;
    struct EventStop : public Event
    {
        EventStop(){};
        MOVE_ONLY(EventStop)
#ifdef __arm__
    DECLARE_ALLOCATOR
#endif //__arm__
    protected:
        virtual void Dispatch(void* sm) override;
    };
    typedef std::unique_ptr<EventStop> EventStop_ptr;
    struct EventAfter10Minutes : public Event
    {
        EventAfter10Minutes(){};
        MOVE_ONLY(EventAfter10Minutes)
#ifdef __arm__
    DECLARE_ALLOCATOR
#endif //__arm__
    protected:
        virtual void Dispatch(void* sm) override;
    };
    typedef std::unique_ptr<EventAfter10Minutes> EventAfter10Minutes_ptr;
    /// @}

    /**
     * Controller interface.
     */
    class  ICDPlayerController
    {
    public:
        virtual ~ICDPlayerController(){}

        /// @{ Guards
        virtual bool GuardCDInside()
        {
            /// {{{USER_GuardCDInside}}}
            /// {{{USER_GuardCDInside}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Guard >> GuardCDInside : %s \r\n", (m_GuardCDInside) ? ("True") : ("False"));
#endif
            return m_GuardCDInside;
        }
        virtual bool GuardCDHasMoreTracks()
        {
            /// {{{USER_GuardCDHasMoreTracks}}}
            SetGuardHasMoreTracks();
            /// {{{USER_GuardCDHasMoreTracks}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Guard >> GuardCDHasMoreTracks : %s \r\n", (m_GuardCDHasMoreTracks) ? ("True") : ("False"));
#endif
            return m_GuardCDHasMoreTracks;
        }
        virtual bool GuardCDHasNoMoreTracks()
        {
            /// {{{USER_GuardCDHasNoMoreTracks}}}
            SetGuardHasMoreTracks();
            /// {{{USER_GuardCDHasNoMoreTracks}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Guard >> GuardCDHasNoMoreTracks : %s \r\n", (m_GuardCDHasNoMoreTracks) ? ("True") : ("False"));
#endif
            return m_GuardCDHasNoMoreTracks;
        }
        virtual bool GuardCDHasPreviousTrack()
        {
            /// {{{USER_GuardCDHasPreviousTrack}}}
            m_GuardCDHasPreviousTrack = m_GuardCDInside && m_TrackCount > 0 && m_CurrentTrack > 0;
            /// {{{USER_GuardCDHasPreviousTrack}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Guard >> GuardCDHasPreviousTrack : %s \r\n", (m_GuardCDHasPreviousTrack) ? ("True") : ("False"));
#endif
            return m_GuardCDHasPreviousTrack;
        }
        /// @}

        /// @{ State Entry and Exit
        virtual void StateStop_on_entry()
        {
            /// {{{USER_StateStop_on_entry}}}
            /// {{{USER_StateStop_on_entry}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : State Enter >> StateStop ...\r\n");
#endif
        }
        virtual void StateStop_on_exit()
        {
            /// {{{USER_StateStop_on_exit}}}
            /// {{{USER_StateStop_on_exit}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : State Exit >> StateStop ...\r\n");
#endif
        }
        virtual void StateOpen_on_entry()
        {
            /// {{{USER_StateOpen_on_entry}}}
            /// {{{USER_StateOpen_on_entry}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : State Enter >> StateOpen ...\r\n");
#endif
        }
        virtual void StateOpen_on_exit()
        {
            /// {{{USER_StateOpen_on_exit}}}
            /// {{{USER_StateOpen_on_exit}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : State Exit >> StateOpen ...\r\n");
#endif
        }
        virtual void StatePlay_on_entry()
        {
            /// {{{USER_StatePlay_on_entry}}}
            /// {{{USER_StatePlay_on_entry}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : State Enter >> StatePlay ...\r\n");
#endif
        }
        virtual void StatePlay_on_exit()
        {
            /// {{{USER_StatePlay_on_exit}}}
            /// {{{USER_StatePlay_on_exit}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : State Exit >> StatePlay ...\r\n");
#endif
        }
        virtual void StatePause_on_entry()
        {
            /// {{{USER_StatePause_on_entry}}}
            /// {{{USER_StatePause_on_entry}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : State Enter >> StatePause ...\r\n");
#endif
        }
        virtual void StatePause_on_exit()
        {
            /// {{{USER_StatePause_on_exit}}}
            /// {{{USER_StatePause_on_exit}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : State Exit >> StatePause ...\r\n");
#endif
        }
        /// @}

        /// @{ Actions
        virtual void OnOpenDrive(EventOpen const& data)
        {
            /// {{{USER_OnOpenDrive_EventOpen}}}
            /// {{{USER_OnOpenDrive_EventOpen}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Action >> OnOpenDrive on event EventOpen ... \r\n");
#endif
        };
        virtual void OnPlayTrack(EventPlay const& data)
        {
            /// {{{USER_OnPlayTrack_EventPlay}}}
            /// {{{USER_OnPlayTrack_EventPlay}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Action >> OnPlayTrack on event EventPlay ... \r\n");
#endif
        };
        virtual void OnCloseDrive(EventOpen const& data)
        {
            /// {{{USER_OnCloseDrive_EventOpen}}}
            /// {{{USER_OnCloseDrive_EventOpen}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Action >> OnCloseDrive on event EventOpen ... \r\n");
#endif
        };
        virtual void OnPause(EventPlay const& data)
        {
            /// {{{USER_OnPause_EventPlay}}}
            /// {{{USER_OnPause_EventPlay}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Action >> OnPause on event EventPlay ... \r\n");
#endif
        };
        virtual void OnPlayNextTrack(EventEndOfTrack const& data)
        {
            /// {{{USER_OnPlayNextTrack_EventEndOfTrack}}}
            PlayNextTrack();
            /// {{{USER_OnPlayNextTrack_EventEndOfTrack}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Action >> OnPlayNextTrack on event EventEndOfTrack ... \r\n");
#endif
        };
        virtual void OnStop(EventEndOfTrack const& data)
        {
            /// {{{USER_OnStop_EventEndOfTrack}}}
            m_CurrentTrack = 0;
            /// {{{USER_OnStop_EventEndOfTrack}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Action >> OnStop on event EventEndOfTrack ... \r\n");
#endif
        };
        virtual void OnPlayNextTrack(EventSkipNextTrack const& data)
        {
            /// {{{USER_OnPlayNextTrack_EventSkipNextTrack}}}
            PlayNextTrack();
            /// {{{USER_OnPlayNextTrack_EventSkipNextTrack}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Action >> OnPlayNextTrack on event EventSkipNextTrack ... \r\n");
#endif
        };
        virtual void OnPlayPreviousTrack(EventSkipPreviousTrack const& data)
        {
            /// {{{USER_OnPlayPreviousTrack_EventSkipPreviousTrack}}}
            m_CurrentTrack = (m_CurrentTrack > 0) ? m_CurrentTrack - 1 : m_CurrentTrack;
            /// {{{USER_OnPlayPreviousTrack_EventSkipPreviousTrack}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Action >> OnPlayPreviousTrack on event EventSkipPreviousTrack ... \r\n");
#endif
        };
        virtual void OnStop(EventStop const& data)
        {
            /// {{{USER_OnStop_EventStop}}}
            m_CurrentTrack = 0;
            /// {{{USER_OnStop_EventStop}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Action >> OnStop on event EventStop ... \r\n");
#endif
        };
        virtual void OnStop(EventAfter10Minutes const& data)
        {
            /// {{{USER_OnStop_EventAfter10Minutes}}}
            m_CurrentTrack = 0;
            /// {{{USER_OnStop_EventAfter10Minutes}}}
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : Action >> OnStop on event EventAfter10Minutes ... \r\n");
#endif
        };
        /// @}

        /// {{{USER_PUBLIC_MEMBERS}}}
        void SetHasCD(bool has_cd) {
            m_GuardCDInside = has_cd;
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : m_GuardCDInside : %i ... \r\n", has_cd);
#endif
        }
        void SetTrackCount(uint8_t trackcnt) {
            m_TrackCount = trackcnt;
        }
        void SetIsDriveOpen(bool open) {
            m_IsDriveOpen = true;
        }
        uint8_t GetTrackCount() {
            return m_TrackCount;
        }
        uint8_t GetCurrentTrack() {
            return m_CurrentTrack;
        }
        /// {{{USER_PUBLIC_MEMBERS}}}

    protected:
        ICDPlayerController()
        {
            m_GuardCDInside = false;
            m_GuardCDHasMoreTracks = false;
            m_GuardCDHasNoMoreTracks = false;
            m_GuardCDHasPreviousTrack = false;
            /// {{{USER_CONSTRUCTOR}}}
            m_TrackCount = 0;
            m_CurrentTrack = 0;
            m_IsDriveOpen = false;
            /// {{{USER_CONSTRUCTOR}}}
        }

        bool m_GuardCDInside;
        bool m_GuardCDHasMoreTracks;
        bool m_GuardCDHasNoMoreTracks;
        bool m_GuardCDHasPreviousTrack;

        /// {{{USER_PROTECTED_MEMBERS}}}
        uint8_t m_TrackCount;
        uint8_t m_CurrentTrack;
        bool m_IsDriveOpen;
        void PlayNextTrack() {
            m_CurrentTrack = (m_CurrentTrack < m_TrackCount) ? m_CurrentTrack + 1 : m_CurrentTrack;
#ifdef _OUT_CDPlayer_DISP_
            printf("ICDPlayerController : PlayNextTrack : %i ... \r\n", m_CurrentTrack);
#endif
        }
        void SetGuardHasMoreTracks() {
            m_GuardCDHasMoreTracks = m_GuardCDInside && (m_TrackCount > 0) && (m_CurrentTrack < (m_TrackCount - 1));
            m_GuardCDHasNoMoreTracks = !m_GuardCDHasMoreTracks;
        }
        /// {{{USER_PROTECTED_MEMBERS}}}
    };
}

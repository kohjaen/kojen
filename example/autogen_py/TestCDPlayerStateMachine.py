#!/usr/bin/env python3

'''
  @file
  @ingroup GROUP_EXAMPLE
  @brief   An example demonstrating code-generation abilities.

           This code is Autogenerated from 'Transition Table' with the MIT License.
           As such, please only hand-code within 'USER' tags.

  @author  yourname@yourdomain.com
'''

import unittest
import threading
import queue

from CDPlayerController import *
from CDPlayerStateMachine import *
# {{{USER_IMPORTS}}}
# {{{USER_IMPORTS}}}

class TestCDPlayerController(CDPlayerController):
    ## Test context constructor.
    def __init__(self):
        CDPlayerController.__init__(self)
        # {{{USER_CONSTRUCTOR}}}
        self.m_expected_track_number = 0
        self.currentTrack = 0
        self.trackCount = 0
        self.isDriveOpen = False
        # {{{USER_CONSTRUCTOR}}}

    # Overridden guards.
    #
    def GuardCDInside(self, event) -> bool:
        # {{{USER_GuardCDInside}}}
        # {{{USER_GuardCDInside}}}
        return CDPlayerController.GuardCDInside(self, event)
    def GuardCDHasMoreTracks(self, event) -> bool:
        # {{{USER_GuardCDHasMoreTracks}}}
        self.SetGuardHasMoreTracks()
        # {{{USER_GuardCDHasMoreTracks}}}
        return CDPlayerController.GuardCDHasMoreTracks(self, event)
    def GuardCDHasNoMoreTracks(self, event) -> bool:
        # {{{USER_GuardCDHasNoMoreTracks}}}
        self.SetGuardHasMoreTracks()
        # {{{USER_GuardCDHasNoMoreTracks}}}
        return CDPlayerController.GuardCDHasNoMoreTracks(self, event)
    def GuardCDHasPreviousTrack(self, event) -> bool:
        # {{{USER_GuardCDHasPreviousTrack}}}
        self.guardCDHasPreviousTrack = self.guardCDInside and self.trackCount > 0 and self.currentTrack > 0
        # {{{USER_GuardCDHasPreviousTrack}}}
        return CDPlayerController.GuardCDHasPreviousTrack(self, event)

    ## Overridden on state entry/exit.
    #
    def OnStateStopEntry(self, event) -> None:
        CDPlayerController.OnStateStopEntry(self, event)
        # {{{USER_StateStop_on_entry}}}
        # {{{USER_StateStop_on_entry}}}
    def OnStateStopExit(self, event) -> None:
        CDPlayerController.OnStateStopExit(self, event)
        # {{{USER_StateStop_on_exit}}}
        # {{{USER_StateStop_on_exit}}}
    def OnStateOpenEntry(self, event) -> None:
        CDPlayerController.OnStateOpenEntry(self, event)
        # {{{USER_StateOpen_on_entry}}}
        # {{{USER_StateOpen_on_entry}}}
    def OnStateOpenExit(self, event) -> None:
        CDPlayerController.OnStateOpenExit(self, event)
        # {{{USER_StateOpen_on_exit}}}
        # {{{USER_StateOpen_on_exit}}}
    def OnStatePlayEntry(self, event) -> None:
        CDPlayerController.OnStatePlayEntry(self, event)
        # {{{USER_StatePlay_on_entry}}}
        # {{{USER_StatePlay_on_entry}}}
    def OnStatePlayExit(self, event) -> None:
        CDPlayerController.OnStatePlayExit(self, event)
        # {{{USER_StatePlay_on_exit}}}
        # {{{USER_StatePlay_on_exit}}}
    def OnStatePauseEntry(self, event) -> None:
        CDPlayerController.OnStatePauseEntry(self, event)
        # {{{USER_StatePause_on_entry}}}
        # {{{USER_StatePause_on_entry}}}
    def OnStatePauseExit(self, event) -> None:
        CDPlayerController.OnStatePauseExit(self, event)
        # {{{USER_StatePause_on_exit}}}
        # {{{USER_StatePause_on_exit}}}

    ## Overridden actions.
    # </summary>
    def OnOpenDrive(self, event) -> None:
        CDPlayerController.OnOpenDrive(self, event);
        # {{{USER_OnOpenDrive_OnOpenDrive}}}
        # {{{USER_OnOpenDrive_OnOpenDrive}}}
    def OnPlayTrack(self, event) -> None:
        CDPlayerController.OnPlayTrack(self, event);
        # {{{USER_OnPlayTrack_OnPlayTrack}}}
        assert self.m_expected_track_number == event.trackNo
        # {{{USER_OnPlayTrack_OnPlayTrack}}}
    def OnCloseDrive(self, event) -> None:
        CDPlayerController.OnCloseDrive(self, event);
        # {{{USER_OnCloseDrive_OnCloseDrive}}}
        # {{{USER_OnCloseDrive_OnCloseDrive}}}
    def OnPause(self, event) -> None:
        CDPlayerController.OnPause(self, event);
        # {{{USER_OnPause_OnPause}}}
        # {{{USER_OnPause_OnPause}}}
    def OnPlayNextTrack(self, event) -> None:
        CDPlayerController.OnPlayNextTrack(self, event);
        # {{{USER_OnPlayNextTrack_OnPlayNextTrack}}}
        self.PlayNextTrack()
        # {{{USER_OnPlayNextTrack_OnPlayNextTrack}}}
    def OnStop(self, event) -> None:
        CDPlayerController.OnStop(self, event);
        # {{{USER_OnStop_OnStop}}}
        self.currentTrack = 0
        # {{{USER_OnStop_OnStop}}}
    def OnPlayPreviousTrack(self, event) -> None:
        CDPlayerController.OnPlayPreviousTrack(self, event);
        # {{{USER_OnPlayPreviousTrack_OnPlayPreviousTrack}}}
        self.currentTrack = (self.currentTrack - 1) if (self.currentTrack > 0) else self.currentTrack
        # {{{USER_OnPlayPreviousTrack_OnPlayPreviousTrack}}}
    # {{{USER_MEMBERS}}}
    def SetHasCD(self, has_cd) -> None:
        self.guardCDInside = has_cd
        print("CDPlayer >> guardCDInside {0:D} ... ", str(has_cd))

    def SetTrackCount(self, trackcnt) -> None:
        self.trackCount = trackcnt

    def SetIsDriveOpen(self, open) -> None:
        self.isDriveOpen = open

    def GetTrackCount(self) -> int:
        return self.trackCount

    def GetCurrentTrack(self) -> int:
        return self.currentTrack

    def PlayNextTrack(self) -> None:
        self.currentTrack = (self.currentTrack + 1) if (self.currentTrack < self.trackCount) else self.currentTrack
        print("CDPlayer >> PlayNextTrack {0:D} ...", str(self.currentTrack))

    def SetGuardHasMoreTracks(self) -> None:
        self.guardCDHasMoreTracks = self.guardCDInside and (self.trackCount > 0) and (self.currentTrack < (self.trackCount - 1))
        self.guardCDHasNoMoreTracks = not self.guardCDHasMoreTracks
    # {{{USER_MEMBERS}}}

## Python Unittest
class TestCDPlayer(unittest.TestCase):

    def setUp(self):
        self.context = TestCDPlayerController()
        self.sm = CDPlayerStateMachine(self.context)

    def test_states(self):
        # {{{USER_UNIT_TEST_STATES}}}
        import time
        NO_TRACKS = 10
        self.assertTrue(self.sm.IsStateStop())
        self.assertTrue(not self.context.guardCDInside)
        # Open the CD player
        self.sm.TriggerEventOpen()
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStateOpen())
        # Insert a CD and close the CD player
        self.sm.TriggerEventOpen()
        time.sleep(0.1)
        # CD player motor closes the drive...an interrupt triggers that is close
        self.context.SetHasCD(True)
        # Read the CD info...
        self.context.SetTrackCount(NO_TRACKS)
        self.assertTrue(self.sm.IsStateStop())
        self.assertEqual(NO_TRACKS, self.context.GetTrackCount())
        self.assertEqual(0, self.context.GetCurrentTrack())
        self.assertTrue(self.context.GuardCDInside(None))
        self.assertTrue(self.context.GuardCDHasMoreTracks(None))
        self.assertTrue(not self.context.GuardCDHasPreviousTrack(None))
        ##
        ## Test: Skipping forward and backward, pause and resume, then stopping somewhere in the middle.
        ##
        # Play the first track...
        self.context.m_expected_track_number = 1
        self.sm.TriggerEventPlay(1)
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStatePlay())
        self.assertEqual(0, self.context.GetCurrentTrack())
        # end of track.
        self.sm.TriggerEventEndOfTrack()
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStatePlay())
        self.assertEqual(1, self.context.GetCurrentTrack())
        # end of track.
        self.sm.TriggerEventEndOfTrack()
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStatePlay())
        self.assertEqual(2, self.context.GetCurrentTrack())
        # skip next track
        self.sm.TriggerEventSkipNextTrack()
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStatePlay())
        self.assertEqual(3, self.context.GetCurrentTrack())
        # skip previous track
        self.sm.TriggerEventSkipPreviousTrack()
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStatePlay())
        self.assertEqual(2, self.context.GetCurrentTrack())
        # Pause.Shouldn't matter what track is passed...
        self.sm.TriggerEventPlay(99)
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStatePause())
        # Resume
        self.context.m_expected_track_number = 5
        self.sm.TriggerEventPlay(5)
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStatePlay())
        self.assertEqual(2, self.context.GetCurrentTrack())
        # Stop
        self.sm.TriggerEventStop()
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStateStop())
        # When stopping we cleared the current track...
        self.assertEqual(0, self.context.GetCurrentTrack())
        ##
        ## Test: pause and automatic stop after 10 minutes.
        ##
        self.context.m_expected_track_number = 25
        self.sm.TriggerEventPlay(25)
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStatePlay())
        self.assertEqual(0, self.context.GetCurrentTrack())
        # next track.
        self.sm.TriggerEventEndOfTrack()
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStatePlay())
        self.assertEqual(1, self.context.GetCurrentTrack())
        # pause.Shouldn't matter what track is played
        self.sm.TriggerEventPlay(99)
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStatePause())
        # 10 minutes go by, and a timer interrupt signals this...
        self.sm.TriggerEventAfter10Minutes()
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStateStop())
        #When stopping we cleared the current track...
        self.assertEqual(0, self.context.GetCurrentTrack())
        ##
        ## Test: playing a whole CD goes to 'stop'.
        ##
        self.context.m_expected_track_number = 15
        self.sm.TriggerEventPlay(15)
        time.sleep(0.1)
        self.assertTrue(self.sm.IsStatePlay())
        for i in range(NO_TRACKS+1):
            if i < NO_TRACKS:
                self.assertEqual(i, self.context.GetCurrentTrack())
            else:
                self.assertEqual(0, self.context.GetCurrentTrack())
            # end of track.
            self.sm.TriggerEventEndOfTrack()
            time.sleep(0.1)

        self.assertTrue(self.sm.IsStateStop())
        # When stopping we cleared the current track...
        self.assertEqual(0, self.context.GetCurrentTrack());
        # {{{USER_UNIT_TEST_STATES}}}
        pass

## Console Runner Exit
#
class Exit(Exception):
    pass

## Console Runner Test Suite
# Run a statemachine on the console taking keypresses as events.
#
class ConsoleRunner(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        self.context = TestCDPlayerController()
        self.sm = CDPlayerStateMachine(self.context)
        self.__runThreaded = True
        self.__fifoQueue = queue.Queue()  # threadsafe by default.
        # {{{USER_CONSOLE_RUNNER}}}
        # {{{USER_CONSOLE_RUNNER}}}
        self.start()

    ## @brief Threading
    #
    # @{
    def run(self) -> None:
        while self.__runThreaded:
            try:
                event = self.__fifoQueue.get(block=True, timeout=5)  # 5s timeout for graceful shutdown.
                self.process(event)
                self.__fifoQueue.task_done()
            except queue.Empty:
                pass

    def stop(self) -> None:
        self.sm.stop()
        if self.__runThreaded:
            self.__runThreaded = False
            self.__fifoQueue.join()
            self.join()
    # @}

    def printHelp(self):
        print("##############################################")
        print("a      : send EventOpen event.")
        print("b      : send EventPlay event.")
        print("c      : send EventEndOfTrack event.")
        print("d      : send EventSkipNextTrack event.")
        print("e      : send EventSkipPreviousTrack event.")
        print("f      : send EventStop event.")
        print("g      : send EventAfter10Minutes event.")
        print('g0=0/1 : set GuardCDInside to false/true')
        print('g1=0/1 : set GuardCDHasMoreTracks to false/true')
        print('g2=0/1 : set GuardCDHasNoMoreTracks to false/true')
        print('g3=0/1 : set GuardCDHasPreviousTrack to false/true')
        print("H      : print this HELP.")
        print("exit   : EXIT the console runner.")
        print("##############################################")

    def processConsoleInput(self, input):
        if input == 'a':
            self.sm.TriggerEventOpen()
            return
        if input == 'b':
            self.sm.TriggerEventPlay(trackNo)
            return
        if input == 'c':
            self.sm.TriggerEventEndOfTrack()
            return
        if input == 'd':
            self.sm.TriggerEventSkipNextTrack()
            return
        if input == 'e':
            self.sm.TriggerEventSkipPreviousTrack()
            return
        if input == 'f':
            self.sm.TriggerEventStop()
            return
        if input == 'g':
            self.sm.TriggerEventAfter10Minutes()
            return
        if 'g0=' in input:
            input = input.replace('g0=', '').strip()
            self.context.guardCDInside = False if '0' in input else True
            print ("guardCDInside set as ", "false" if not self.context.guardCDInside else "true")
            return
        if 'g1=' in input:
            input = input.replace('g1=', '').strip()
            self.context.guardCDHasMoreTracks = False if '0' in input else True
            print ("guardCDHasMoreTracks set as ", "false" if not self.context.guardCDHasMoreTracks else "true")
            return
        if 'g2=' in input:
            input = input.replace('g2=', '').strip()
            self.context.guardCDHasNoMoreTracks = False if '0' in input else True
            print ("guardCDHasNoMoreTracks set as ", "false" if not self.context.guardCDHasNoMoreTracks else "true")
            return
        if 'g3=' in input:
            input = input.replace('g3=', '').strip()
            self.context.guardCDHasPreviousTrack = False if '0' in input else True
            print ("guardCDHasPreviousTrack set as ", "false" if not self.context.guardCDHasPreviousTrack else "true")
            return
        if input == 'H':
            self.printHelp()
            return
        if input == 'exit':
            raise Exit
        print("'", input, '" not defined.')
    
    def startConsole(self):
        import sys
        self.printHelp()
        try:
            for line in sys.stdin:
                line = line.replace("\n", "")
                for var in line.split():
                    self.processConsoleInput(var)
        except Exit:
            print("Goodbye...")

    # {{{USER_TESTS}}}
    # {{{USER_TESTS}}}

if __name__ == '__main__':
    testrunner = ConsoleRunner()
    # {{{USER_MAIN}}}
    # {{{USER_MAIN}}}
    testrunner.startConsole()
    testrunner.stop()